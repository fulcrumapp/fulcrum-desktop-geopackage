{"version":3,"sources":["../plugin.js"],"names":["runCommand","activate","fulcrum","args","sql","runSQL","account","fetchAccount","org","forms","findActiveForms","form","updateForm","console","error","run","replace","db","execute","onFormSave","oldForm","newForm","onRecordsFinished","updateRecord","record","rawPath","join","dir","updateTable","name","rowID","repeatable","elementsOfType","tableName","dataName","key","sourceTableName","tempTableName","dropTemplate","ident","createTemplateTable","result","get","columns","create","columnNames","map","o","orderBy","allSQL","parentSQL","geomSQL","task","cli","command","desc","builder","required","type","handler","defaultDatabaseOptions","wal","autoVacuum","synchronous","mkdirp","options","file","open","enableSpatiaLite","on","deactivate","close","Promise","resolve","reject","spatialitePath","process","env","DEVELOPMENT","dirname","execPath","database","loadExtension","err","check","all","rows","mode","Error","ex","message","log","JSON","stringify"],"mappings":"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","file":"plugin.js","sourcesContent":["import path from 'path';\nimport { SQLite } from 'fulcrum';\n\nexport default class {\n  async task(cli) {\n    return cli.command({\n      command: 'geopackage',\n      desc: 'create a geopackage database for an organization',\n      builder: {\n        org: {\n          desc: 'organization name',\n          required: true,\n          type: 'string'\n        }\n      },\n      handler: this.runCommand\n    });\n  }\n\n  runCommand = async () => {\n    await this.activate();\n\n    if (fulcrum.args.sql) {\n      await this.runSQL(fulcrum.args.sql);\n      return;\n    }\n\n    const account = await fulcrum.fetchAccount(fulcrum.args.org);\n\n    if (account) {\n      const forms = await account.findActiveForms({});\n\n      for (const form of forms) {\n        await this.updateForm(form, account);\n      }\n    } else {\n      console.error('Unable to find account', fulcrum.args.org);\n    }\n  }\n\n  async activate() {\n    const defaultDatabaseOptions = {\n      wal: true,\n      autoVacuum: true,\n      synchronous: 'off'\n    };\n\n    fulcrum.mkdirp('geopackage');\n\n    const options = {\n      file: path.join(fulcrum.dir('geopackage'), fulcrum.args.org + '.gpkg')\n    };\n\n    this.db = await SQLite.open({...defaultDatabaseOptions, ...options});\n\n    await this.enableSpatiaLite(this.db);\n\n    fulcrum.on('form:save', this.onFormSave);\n    fulcrum.on('records:finish', this.onRecordsFinished);\n  }\n\n  async deactivate() {\n    if (this.db) {\n      await this.db.close();\n    }\n  }\n\n  run = (sql) => {\n    sql = sql.replace(/\\0/g, '');\n\n    return this.db.execute(sql);\n  }\n\n  onFormSave = async ({form, account, oldForm, newForm}) => {\n    await this.updateForm(form, account);\n  }\n\n  onRecordsFinished = async ({form, account}) => {\n    await this.updateForm(form, account);\n  }\n\n  updateRecord = async (record) => {\n    await this.updateForm(record.form, account);\n  }\n\n  updateForm = async (form, account) => {\n    const rawPath = path.join(fulcrum.dir('data'), 'fulcrum.db');\n\n    await this.run(`ATTACH DATABASE '${rawPath}' as 'app'`);\n\n    await this.updateTable(form.name, `account_${account.rowID}_form_${form.rowID}_view_full`, null);\n\n    for (const repeatable of form.elementsOfType('Repeatable')) {\n      const tableName = `${form.name} - ${repeatable.dataName}`;\n\n      await this.updateTable(tableName, `account_${account.rowID}_form_${form.rowID}_${repeatable.key}_view_full`, repeatable);\n    }\n\n    await this.run(`DETACH DATABASE 'app'`);\n  }\n\n  updateTable = async (tableName, sourceTableName, repeatable) => {\n    const tempTableName = sourceTableName + '_tmp';\n\n    const dropTemplate = `DROP TABLE IF EXISTS ${this.db.ident(tempTableName)};`;\n\n    await this.run(dropTemplate);\n\n    const createTemplateTable = `CREATE TABLE ${this.db.ident(tempTableName)} AS SELECT * FROM app.${sourceTableName} WHERE 1=0;`;\n\n    await this.run(createTemplateTable);\n\n    const result = await this.db.get(`SELECT sql FROM sqlite_master WHERE tbl_name = '${tempTableName}'`);\n    const {columns} = await this.db.execute(`SELECT * FROM app.${sourceTableName} WHERE 1=0;`);\n\n    await this.run(dropTemplate);\n\n    const create = result.sql.replace(tempTableName, this.db.ident(tableName))\n                             .replace('(', ' (\\n_id INTEGER PRIMARY KEY AUTOINCREMENT, ');\n\n    const columnNames = columns.map(o => this.db.ident(o.name));\n\n    let orderBy = 'ORDER BY _record_id';\n\n    if (repeatable != null) {\n      orderBy = 'ORDER BY _child_record_id';\n    }\n\n    const allSQL = `\n      DROP TABLE IF EXISTS ${this.db.ident(tableName)};\n\n      ${ create };\n\n      ALTER TABLE ${this.db.ident(tableName)}\n      ADD _created_by_email TEXT;\n\n      ALTER TABLE ${this.db.ident(tableName)}\n      ADD _updated_by_email TEXT;\n\n      INSERT INTO ${this.db.ident(tableName)} (${columnNames.join(', ')}, _created_by_email, _updated_by_email)\n      SELECT ${columnNames.map(o => 't.' + o).join(', ')}, mc.email AS _created_by_email, mu.email AS _updated_by_email\n      FROM app.${sourceTableName} t\n      LEFT JOIN memberships mc ON t._created_by_id = mc.user_resource_id\n      LEFT JOIN memberships mu ON t._updated_by_id = mu.user_resource_id\n      ${orderBy};\n    `;\n\n    await this.run(allSQL);\n\n    if (repeatable == null) {\n      const parentSQL = `\n        ALTER TABLE ${this.db.ident(tableName)}\n        ADD _assigned_to_email TEXT;\n\n        ALTER TABLE ${this.db.ident(tableName)}\n        ADD _project_name TEXT;\n\n        UPDATE ${this.db.ident(tableName)}\n        SET _assigned_to_email = (SELECT email FROM app.memberships m WHERE m.user_resource_id = ${this.db.ident(tableName)}._assigned_to_id),\n        _project_name = (SELECT name FROM app.projects p WHERE p.resource_id = ${this.db.ident(tableName)}._project_id);\n      `;\n\n      await this.run(parentSQL);\n    }\n\n    const geomSQL = `\n      DELETE FROM gpkg_geometry_columns WHERE table_name='${tableName}';\n\n      INSERT INTO gpkg_geometry_columns\n      (table_name, column_name, geometry_type_name, srs_id, z, m)\n      VALUES ('${tableName}', '_geom', 'POINT', 4326, 0, 0);\n\n      ALTER TABLE ${this.db.ident(tableName)} ADD _geom BLOB;\n\n      UPDATE ${this.db.ident(tableName)}\n      SET _geom = gpkgMakePoint(_longitude, _latitude, 4326);\n\n      INSERT INTO gpkg_contents (table_name, data_type, identifier, srs_id)\n      SELECT '${tableName}', 'features', '${tableName}', 4326\n      WHERE NOT EXISTS (SELECT 1 FROM gpkg_contents WHERE table_name = '${tableName}');\n    `;\n\n    await this.run(geomSQL);\n  }\n\n  async enableSpatiaLite(db) {\n    await new Promise((resolve, reject) => {\n      const spatialitePath = process.env.DEVELOPMENT ? path.join('.', 'resources', 'spatialite', 'mac', 'mod_spatialite')\n                                                     : path.join(path.dirname(process.execPath), '..', 'Resources', 'spatialite', 'mac', 'mod_spatialite');\n\n      db.database.loadExtension(spatialitePath, (err) => err ? reject(err) : resolve());\n    });\n\n    const check = await this.db.all('SELECT CheckGeoPackageMetaData() AS result');\n\n    if (check[0].result !== 1) {\n      const rows = await this.db.all('SELECT gpkgCreateBaseTables()');\n    }\n\n    const mode = await this.db.all('SELECT EnableGpkgMode() AS enabled, GetGpkgMode() AS mode');\n\n    if (mode[0].mode !== 1) {\n      throw new Error('Unexpected error verifying the GPKG mode');\n    }\n  }\n\n  async runSQL(sql) {\n    let result = null;\n\n    try {\n      result = await this.db.all(sql);\n    } catch (ex) {\n      result = {error: ex.message};\n    }\n\n    console.log(JSON.stringify(result));\n  }\n}\n"]}